C51 COMPILER V9.00   ISR                                                                   04/23/2015 18:58:46 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN .\output\isr.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE isr\isr.c LARGE BROWSE INCDIR(.\main;.\eeprom;.\oled;.\uart;.\74hc595;.\cd4
                    -052;.\isr;.\Key) DEBUG OBJECTEXTEND PRINT(.\list\isr.lst) OBJECT(.\output\isr.obj)

line level    source

   1          #include "main.h"
   2          #include "isr.h"
   3          #include "key.h"
   4          #include "uart.h"
   5          #include "_595.h"
   6          #include "oled.h"
   7          
   8          //#define GET_FREQ
   9          #ifdef GET_FREQ
              u16 OscFreq;
              #endif
  12          #define D_TIMER0   40        //40us
  13          #define SYNCMAX    750           //30ms---->3000/4=750
  14          #define SYNCMIN    125           //5ms---->500/4=125
  15          #define D_HIGHMAX  30            //970us ---->970/40 = 24 
  16          #define D_IR_BIT_NUMBER   24    //◊∞‘ÿŒª¬Î ˝
  17          
  18          u16 Decodecnt;
  19          u32 ReIRcode;   //∂¡µΩµƒµÿ÷∑¬
  20          
  21          /****************************************************************************************
  22          //                 |````|
  23          //SYNC: ___|    |_____________________________________________________________...
  24          //          4clk                         124clk
  25          //
  26          //
  27          //           |````|                        |                      |````````````|        |               1clk = 8 osclk
  28          //0:   __|    |____________|        1:  __|                        |____|
  29          //        4clk    12clk                     12clk     4clk
  30          //Datalength:
  31          //Minlength:1.31ms @300k/13V    Maxlength:3.01ms @430k/4v
  32          //bit:[0:19] addcode    bit:[20:23] keycode
  33          ****************************************************************************************/
  34          void EnDecode(void)
  35          {
  36   1         EX0 = 1;                 //ø™int0÷–∂œ
  37   1         Decodecnt = 0;                       //∏¥Œªº∆ ˝∆˜
  38   1         ReIRcode = 0;
  39   1         Timer0_Run();                        //ø™∂® ±∆˜
  40   1         Timer0_InterruptEnable();//ø™∂® ±∆˜1÷–∂œ
  41   1         ENVSOC();
  42   1         K1_OUT = 1;
  43   1        //ø™÷–∂œ ø™∂® ±∆˜ ≤∂ªÒIRcode
  44   1      }
  45          void DsDecode(void)
  46          {
  47   1         EX0 = 0;
  48   1         Timer0_Stop();
  49   1         Decodecnt = 0;                       //∏¥Œªº∆ ˝∆˜
  50   1         ReIRcode = 0;
  51   1         DSENVSOC();
  52   1         K1_OUT = 0;
  53   1        //πÿ÷–∂œ πÿ∂® ±∆˜ Ω⁄ °◊ ‘¥
  54   1      }
C51 COMPILER V9.00   ISR                                                                   04/23/2015 18:58:46 PAGE 2   

  55          void Timer0Init(void)           //40us@11.0592MHz       //”√¿¥Ω‚¬Î
  56          {
  57   1              Timer0_Stop();                  //πÿ∂® ±∆˜0
  58   1              AUXR |= 0x80;                   //∂® ±∆˜ ±÷”1Tƒ£ Ω
  59   1              TMOD &= 0xF0;                   //…Ë÷√∂® ±∆˜ƒ£ Ω
  60   1              TL0 = 0x46;                             //…Ë÷√∂® ±≥ı÷µ
  61   1              TH0 = 0xFE;                             //…Ë÷√∂® ±≥ı÷µ
  62   1              TF0 = 0;                                //«Â≥˝TF0±Í÷æ
  63   1      }
  64          
  65          void Timer1Init(void)           //5∫¡√Î@11.0592MHz       ”√¿¥…®√Ë∞¥º¸µ»
  66          {
  67   1              Timer1_Stop();                  //πÿ∂® ±∆˜1
  68   1              AUXR |= 0x40;                   //∂® ±∆˜ ±÷”1Tƒ£ Ω
  69   1              TMOD &= 0x0F;                   //…Ë÷√∂® ±∆˜ƒ£ Ω
  70   1              TL1 = 0x00;                             //…Ë÷√∂® ±≥ı÷µ
  71   1              TH1 = 0x28;                             //…Ë÷√∂® ±≥ı÷µ
  72   1              TF1 = 0;                                //«Â≥˝TF1±Í÷æ
  73   1              Timer1_Run();                   //ø™∂® ±∆˜1
  74   1      }
  75          void Int0Init(void)
  76          {
  77   1          //≈‰÷√int0 ‰»Îƒ£ Ω  P3.2    XXXX,XHXX
  78   1              P3M1 |= 0x04;
  79   1              P3M0 &= ~0x04;
  80   1          INT0 = 0;
  81   1              IT0 = 0;                // 1£∫œ¬Ωµ—ÿ÷–∂œ    0£∫‘ –Ì…œ…˝—ÿ∫Õœ¬Ωµ—ÿ÷–∂œ
  82   1      }
  83          
  84          void timerInit(void)
  85          {
  86   1              Timer0Init();          //º∆ ˝≤ª÷–∂œ
  87   1              Timer1Init();              //º∆ ˝÷–∂œ
  88   1              Timer1_InterruptEnable();//ø™∂® ±∆˜1÷–∂œ
  89   1              Int0Init();
  90   1              EnDecode();
  91   1      }
  92          void INT0_isr() interrupt INT0_VECTOR  //Õ‚≤ø÷–∂œ0 ”√¿¥ºÏ≤‚“£øÿ¬Î
  93          {
  94   1          static u16 CountL , CountH;
  95   1              static u8 IR_BitCnt;    
  96   1              static u8 sync = 0;
  97   1              static u8 step = 0;
  98   1              static u32 IR_tmp=0;
  99   1              if(!sync)
 100   1              {
 101   2                      if(INT0) //…œ…˝—ÿ
 102   2                      {
 103   3                if(step==0)  //∆ ºŒª÷√£¨µ⁄“ª∏ˆ…œ…˝—ÿ∏¥Œªº∆ ˝∆˜
 104   3                        {
 105   4                                      Decodecnt = 0;
 106   4                                      step = 1;          //step = 1;
 107   4                        }
 108   3                        else if(step==2)     //ºÏ≤‚µΩ¡Àµ⁄∂˛∏ˆ…œ…˝—ÿ£¨ø…“‘ªÒ»°µÕµÁ∆Ω≥÷–¯ ±º‰
 109   3                        {               
 110   4                                 CountL = Decodecnt;   //ªÒ»°µΩµÕµÁ∆Ωµƒ ±º‰
 111   4                                 Decodecnt = 0;
 112   4                                 step = 0;
 113   4                                 if(CountL > CountH)   //œ»≈–∂œµÕµÁ∆Ω ±º‰¥Û”⁄∏ﬂµÁ∆Ω ±º‰
 114   4                                 {
 115   5                                    if((CountL >= SYNCMIN)&&(CountL <= SYNCMAX))//ΩÿªÒÕ¨≤Ω¬Î
 116   5                                        {
C51 COMPILER V9.00   ISR                                                                   04/23/2015 18:58:46 PAGE 3   

 117   6                                          sync = 1;
 118   6                                              IR_BitCnt = D_IR_BIT_NUMBER;    //◊∞‘ÿŒª¬Î ˝
 119   6      #ifdef GET_FREQ
                                                  OscFreq =  1000/(CountL*40/124/8);       //kHz
              #endif
 122   6                                        }
 123   5                                 }
 124   4                        }
 125   3      
 126   3                      } 
 127   2                      if(!INT0) //œ¬Ωµ—ÿ
 128   2                      {
 129   3                        if(step == 1)      //Àµ√˜“—ºÏ≤‚µΩ¡À“ª∏ˆ…œ…˝—ÿ
 130   3                        {
 131   4                            
 132   4                                CountH = Decodecnt;   //ªÒ»°µΩ∏ﬂµÁ∆Ωµƒ ±º‰
 133   4                                Decodecnt = 0;
 134   4                                step = 2;
 135   4                        }
 136   3                        else                      //µ⁄“ª¥ŒºÏ≤‚µƒ «œ¬Ωµ—ÿ£¨∏¥Œªº∆ ˝∆˜£¨≤Ω ˝∏¥Œª
 137   3                        {                   
 138   4                                Decodecnt = 0;
 139   4                                step = 0;               
 140   4                        }
 141   3                      }
 142   2              }
 143   1              else //“—Õ¨≤Ω£¨∂¡»° ˝æ›
 144   1              {
 145   2      //              SPEAKER=!SPEAKER;
 146   2                  if(!INT0) //œ¬Ωµ—ÿ
 147   2                  {
 148   3                 CountH = Decodecnt;   //ªÒ»°∏ﬂµÁ∆Ω ±º‰
 149   3                         Decodecnt = 0;
 150   3                         if(CountH > D_HIGHMAX) // ˝æ›≥¨ ±
 151   3                         sync = 0;
 152   3                  }
 153   2                  else if(INT0) //…œ…˝—ÿ
 154   2                  {
 155   3                 CountL = Decodecnt;   //ªÒ»°µÕµÁ∆Ω ±º‰
 156   3                         Decodecnt = 0;
 157   3                         IR_tmp <<= 1; //Ω” ’1bit
 158   3                         if(CountL < CountH)
 159   3                         {
 160   4                               IR_tmp |= 0X01;
 161   4                         } 
 162   3                         if(--IR_BitCnt == 0)                         //≈–∂œΩ” ’ «∑ÒÕÍ≥…
 163   3                         {
 164   4                           ReIRcode = IR_tmp;
 165   4                               IR_tmp = 0;
 166   4                               sync= 0;                       //«Â≥˝Õ¨≤Ω¬Î                
 167   4                         }                                               
 168   3                  }
 169   2              }
 170   1                                       
 171   1      }
 172          
 173          
 174          void T0_isr() interrupt TIMER0_VECTOR //∂® ±∆˜0÷–∂œ     40us
 175          {
 176   1         Decodecnt++;               
 177   1      }
 178          
C51 COMPILER V9.00   ISR                                                                   04/23/2015 18:58:46 PAGE 4   

 179          
 180          void T1_isr() interrupt TIMER1_VECTOR  //∂® ±∆˜1÷–∂œ”√¿¥◊ˆ µ ± ¬º˛¥¶¿Ì  5ms…®√Ë“ª¥Œ
 181          {
 182   1              static u8 cnt = 0;
 183   1              static u8 keycnt=0,beepcnt=0;
 184   1              static u16 popcnt=0,cutcnt=0;
 185   1              keycnt++;
 186   1              cnt++;
 187   1              if(cnt >= 100)//∞Î√Î
 188   1              {
 189   2                cnt =0;
 190   2                LED0=!LED0;
 191   2              } 
 192   1              if(keycnt>15) 
 193   1              {
 194   2               KeyScan();
 195   2               keycnt = 0;
 196   2              }
 197   1              if(BeepFlag == 1)
 198   1              {
 199   2                SPEAKER = 1;
 200   2                if(beepcnt++>=5)
 201   2                {
 202   3                  SPEAKER = 0;
 203   3                      beepcnt = 0;
 204   3                      BeepFlag = 0;
 205   3                }
 206   2              }
 207   1              if(Cutflag ==1)
 208   1              {
 209   2                if(cutcnt++>=7)          //40ms 
 210   2                {
 211   3                      DSENVMOS();                       // πÿmosµÁ‘¥
 212   3                      DSENABLE595();                    // πÿ595øÿ÷∆mosø™πÿ
 213   3                      Cutflag = 0;
 214   3                      cutcnt =0;
 215   3                }
 216   2              } 
 217   1              if(POP != 0) 
 218   1              {
 219   2                 if(popcnt++>=400*POP)
 220   2                 {
 221   3                   popcnt = 0;
 222   3                       POP = 0;
 223   3               memcpy(OLED_GRAM,OLED_GRAM_TMP,512);
 224   3                       OLED_Refresh_Gram();
 225   3                       DsDecode();
 226   3                 }
 227   2              }           
 228   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    771    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
