C51 COMPILER V9.00   ISR                                                                   04/27/2015 19:27:07 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN .\output\isr.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE isr\isr.c LARGE BROWSE INCDIR(.\main;.\eeprom;.\oled;.\uart;.\74hc595;.\cd4
                    -052;.\isr;.\Key) DEBUG OBJECTEXTEND PRINT(.\list\isr.lst) OBJECT(.\output\isr.obj)

line level    source

   1          #include "main.h"
   2          #include "isr.h"
   3          #include "key.h"
   4          #include "uart.h"
   5          #include "_595.h"
   6          #include "oled.h"
   7          
   8          //#define GET_FREQ
   9          #ifdef GET_FREQ
              u16 OscFreq;
              #endif
  12          #define D_TIMER0   40        //40us
  13          #define SYNCMAX    750           //30ms---->3000/4=750
  14          #define SYNCMIN    125           //5ms---->500/4=125
  15          #define D_HIGHMAX  30            //970us ---->970/40 = 24 
  16          #define D_IR_BIT_NUMBER   24    //◊∞‘ÿŒª¬Î ˝
  17          
  18          u16 Decodecnt;
  19          u32 ReIRcode;   //∂¡µΩµƒµÿ÷∑¬
  20          
  21          /****************************************************************************************
  22          //                 |````|
  23          //SYNC: ___|    |_____________________________________________________________...
  24          //          4clk                         124clk
  25          //
  26          //
  27          //           |````|                        |                      |````````````|        |               1clk = 8 osclk
  28          //0:   __|    |____________|        1:  __|                        |____|
  29          //        4clk    12clk                     12clk     4clk
  30          //Datalength:
  31          //Minlength:1.31ms @300k/13V    Maxlength:3.01ms @430k/4v
  32          //bit:[0:19] addcode    bit:[20:23] keycode
  33          ****************************************************************************************/
  34          void EnDecode(void)
  35          {
  36   1         EX0 = 1;                 //ø™int0÷–∂œ
  37   1         Decodecnt = 0;                       //∏¥Œªº∆ ˝∆˜
  38   1         ReIRcode = 0;
  39   1         Timer0_Run();                        //ø™∂® ±∆˜
  40   1         Timer0_InterruptEnable();//ø™∂® ±∆˜1÷–∂œ
  41   1         ENVSOC();
  42   1        //ø™÷–∂œ ø™∂® ±∆˜ ≤∂ªÒIRcode
  43   1      }
  44          void DsDecode(void)
  45          {
  46   1         EX0 = 0;
  47   1         Timer0_Stop();
  48   1         Decodecnt = 0;                       //∏¥Œªº∆ ˝∆˜
  49   1         ReIRcode = 0;
  50   1         DSENVSOC();
  51   1         K1_OUT = 0;
  52   1        //πÿ÷–∂œ πÿ∂® ±∆˜ Ω⁄ °◊ ‘¥
  53   1      }
  54          void Timer0Init(void)           //40us@11.0592MHz       //”√¿¥Ω‚¬Î
C51 COMPILER V9.00   ISR                                                                   04/27/2015 19:27:07 PAGE 2   

  55          {
  56   1              Timer0_Stop();                  //πÿ∂® ±∆˜0
  57   1              AUXR |= 0x80;                   //∂® ±∆˜ ±÷”1Tƒ£ Ω
  58   1              TMOD &= 0xF0;                   //…Ë÷√∂® ±∆˜ƒ£ Ω
  59   1              TL0 = 0x8B;                             //…Ë÷√∂® ±≥ı÷µ
  60   1              TH0 = 0xFC;                             //…Ë÷√∂® ±≥ı÷µ
  61   1              TF0 = 0;                                //«Â≥˝TF0±Í÷æ
  62   1      }
  63          
  64          void Timer1Init(void)           //5∫¡√Î@22.1184MHz       ”√¿¥…®√Ë∞¥º¸µ»
  65          {
  66   1              Timer1_Stop();                  //πÿ∂® ±∆˜1
  67   1              AUXR &= ~0x40;                  //∂® ±∆˜ ±÷”1Tƒ£ Ω
  68   1              TMOD &= 0x0F;                   //…Ë÷√∂® ±∆˜ƒ£ Ω
  69   1              TL1 = 0x00;                             //…Ë÷√∂® ±≥ı÷µ
  70   1              TH1 = 0xDC;                             //…Ë÷√∂® ±≥ı÷µ
  71   1              TF1 = 0;                                //«Â≥˝TF1±Í÷æ
  72   1              Timer1_Run();                   //ø™∂® ±∆˜1
  73   1      }
  74          void Int0Init(void)
  75          {
  76   1          //≈‰÷√int0 ‰»Îƒ£ Ω  P3.2    XXXX,XHXX
  77   1              P3M1 |= 0x04;
  78   1              P3M0 &= ~0x04;
  79   1          INT0 = 0;
  80   1              IT0 = 0;                // 1£∫œ¬Ωµ—ÿ÷–∂œ    0£∫‘ –Ì…œ…˝—ÿ∫Õœ¬Ωµ—ÿ÷–∂œ
  81   1      }
  82          
  83          void timerInit(void)
  84          {
  85   1              Timer0Init();          //º∆ ˝≤ª÷–∂œ
  86   1              Timer1Init();              //º∆ ˝÷–∂œ
  87   1              Timer1_InterruptEnable();//ø™∂® ±∆˜1÷–∂œ
  88   1              Int0Init();
  89   1              EnDecode();
  90   1      }
  91          void INT0_isr() interrupt INT0_VECTOR  //Õ‚≤ø÷–∂œ0 ”√¿¥ºÏ≤‚“£øÿ¬Î
  92          {
  93   1          static u16 CountL , CountH;
  94   1              static u8 IR_BitCnt;    
  95   1              static u8 sync = 0;
  96   1              static u8 step = 0;
  97   1              static u32 IR_tmp=0;
  98   1              if(!sync)
  99   1              {
 100   2                      if(INT0) //…œ…˝—ÿ
 101   2                      {
 102   3                if(step==0)  //∆ ºŒª÷√£¨µ⁄“ª∏ˆ…œ…˝—ÿ∏¥Œªº∆ ˝∆˜
 103   3                        {
 104   4                                      Decodecnt = 0;
 105   4                                      step = 1;          //step = 1;
 106   4                        }
 107   3                        else if(step==2)     //ºÏ≤‚µΩ¡Àµ⁄∂˛∏ˆ…œ…˝—ÿ£¨ø…“‘ªÒ»°µÕµÁ∆Ω≥÷–¯ ±º‰
 108   3                        {               
 109   4                                 CountL = Decodecnt;   //ªÒ»°µΩµÕµÁ∆Ωµƒ ±º‰
 110   4                                 Decodecnt = 0;
 111   4                                 step = 0;
 112   4                                 if(CountL > CountH)   //œ»≈–∂œµÕµÁ∆Ω ±º‰¥Û”⁄∏ﬂµÁ∆Ω ±º‰
 113   4                                 {
 114   5                                    if((CountL >= SYNCMIN)&&(CountL <= SYNCMAX))//ΩÿªÒÕ¨≤Ω¬Î
 115   5                                        {
 116   6                                          sync = 1;   
C51 COMPILER V9.00   ISR                                                                   04/27/2015 19:27:07 PAGE 3   

 117   6                                              IR_BitCnt = D_IR_BIT_NUMBER;    //◊∞‘ÿŒª¬Î ˝
 118   6      #ifdef GET_FREQ
                                                  OscFreq =  1000/(CountL*40/124/8);       //kHz
              #endif
 121   6                         return;
 122   6                                        }
 123   5      
 124   5                                 }
 125   4      
 126   4                        }
 127   3      
 128   3                      } 
 129   2                      if(!INT0) //œ¬Ωµ—ÿ
 130   2                      {
 131   3                        if(step == 1)      //Àµ√˜“—ºÏ≤‚µΩ¡À“ª∏ˆ…œ…˝—ÿ
 132   3                        {
 133   4                            
 134   4                                CountH = Decodecnt;   //ªÒ»°µΩ∏ﬂµÁ∆Ωµƒ ±º‰
 135   4                                Decodecnt = 0;
 136   4                                step = 2;
 137   4                        }
 138   3                        else                      //µ⁄“ª¥ŒºÏ≤‚µƒ «œ¬Ωµ—ÿ£¨∏¥Œªº∆ ˝∆˜£¨≤Ω ˝∏¥Œª
 139   3                        {                   
 140   4                                Decodecnt = 0;
 141   4                                step = 0;               
 142   4                        }
 143   3                      }
 144   2              }
 145   1              else //“—Õ¨≤Ω£¨∂¡»° ˝æ›
 146   1              {
 147   2      //              SPEAKER=!SPEAKER;
 148   2                  if(!INT0) //œ¬Ωµ—ÿ
 149   2                  {
 150   3                 CountH = Decodecnt;   //ªÒ»°∏ﬂµÁ∆Ω ±º‰
 151   3                         Decodecnt = 0;
 152   3                         if(CountH > D_HIGHMAX) // ˝æ›≥¨ ±
 153   3                         sync = 0;
 154   3                  }
 155   2                  else if(INT0) //…œ…˝—ÿ
 156   2                  {
 157   3                 CountL = Decodecnt;   //ªÒ»°µÕµÁ∆Ω ±º‰
 158   3                         Decodecnt = 0;
 159   3                         IR_tmp <<= 1; //Ω” ’1bit
 160   3                         if(CountL < CountH)
 161   3                         {
 162   4                               IR_tmp |= 0X01;
 163   4                         } 
 164   3                         if(--IR_BitCnt == 0)                         //≈–∂œΩ” ’ «∑ÒÕÍ≥…
 165   3                         {
 166   4                           ReIRcode = IR_tmp;
 167   4                               IR_tmp = 0;
 168   4                               sync= 0;                       //«Â≥˝Õ¨≤Ω¬Î                
 169   4                         }                                               
 170   3                  }
 171   2              }
 172   1                                       
 173   1      }
 174          
 175          
 176          void T0_isr() interrupt TIMER0_VECTOR //∂® ±∆˜0÷–∂œ     40us
 177          {
 178   1         Decodecnt++;               
C51 COMPILER V9.00   ISR                                                                   04/27/2015 19:27:07 PAGE 4   

 179   1      }
 180          
 181          
 182          void T1_isr() interrupt TIMER1_VECTOR  //∂® ±∆˜1÷–∂œ”√¿¥◊ˆ µ ± ¬º˛¥¶¿Ì  5ms…®√Ë“ª¥Œ
 183          {
 184   1              static u8 cnt = 0;
 185   1              static u8 keycnt=0,beepcnt=0;
 186   1              static u16 popcnt=0,cutcnt=0;
 187   1              keycnt++;
 188   1              cnt++;
 189   1              if(cnt >= 100)//∞Î√Î
 190   1              {
 191   2                cnt =0;
 192   2                LED0=!LED0;
 193   2              } 
 194   1              if(keycnt>15) 
 195   1              {
 196   2               KeyScan();
 197   2               keycnt = 0;
 198   2              }
 199   1              if(BeepFlag == 1)
 200   1              {
 201   2                SPEAKER = 1;
 202   2                if(beepcnt++>=5)
 203   2                {
 204   3                  SPEAKER = 0;
 205   3                      beepcnt = 0;
 206   3                      BeepFlag = 0;
 207   3                }
 208   2              }
 209   1              if(Cutflag ==1)
 210   1              {
 211   2                if(cutcnt++>=7)          //40ms 
 212   2                {
 213   3                      DSENVMOS();                       // πÿmosµÁ‘¥
 214   3                      DSENABLE595();                    // πÿ595øÿ÷∆mosø™πÿ
 215   3                      Cutflag = 0;
 216   3                      cutcnt =0;
 217   3                }
 218   2              } 
 219   1              if(POP != 0) 
 220   1              {
 221   2                 if(popcnt++>=400*POP)
 222   2                 {
 223   3                   popcnt = 0;
 224   3                       POP = 0;
 225   3               memcpy(OLED_GRAM,OLED_GRAM_TMP,512);
 226   3                       OLED_Refresh_Gram();
 227   3                       DsDecode();
 228   3                 }
 229   2              }           
 230   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    772    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.00   ISR                                                                   04/27/2015 19:27:07 PAGE 5   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
