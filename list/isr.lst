C51 COMPILER V9.00   ISR                                                                   05/06/2015 14:06:26 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN .\output\isr.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE isr\isr.c LARGE BROWSE INCDIR(.\main;.\eeprom;.\oled;.\uart;.\74hc595;.\cd4
                    -052;.\isr;.\Key) DEBUG OBJECTEXTEND PRINT(.\list\isr.lst) OBJECT(.\output\isr.obj)

line level    source

   1          #include "main.h"
   2          #include "isr.h"
   3          #include "key.h"
   4          #include "uart.h"
   5          #include "_595.h"
   6          #include "oled.h"
   7          
   8          //#define GET_FREQ
   9          #ifdef GET_FREQ
              u16 OscFreq;
              #endif
  12          #define D_TIMER0   40        //40us
  13          #define SYNCMAX    750           //30ms---->3000/4=750
  14          #define SYNCMIN    125           //5ms---->500/4=125
  15          #define D_HIGHMAX  30            //970us ---->970/40 = 24 
  16          #define D_IR_BIT_NUMBER   24    //◊∞‘ÿŒª¬Î ˝
  17          
  18          u16 Decodecnt;
  19          u32 ReIRcode;   //∂¡µΩµƒµÿ÷∑¬
  20          
  21          /****************************************************************************************
  22          //                 |````|
  23          //SYNC: ___|    |_____________________________________________________________...
  24          //          4clk                         124clk
  25          //
  26          //
  27          //           |````|                        |                      |````````````|        |               1clk = 8 osclk
  28          //0:   __|    |____________|        1:  __|                        |____|
  29          //        4clk    12clk                     12clk     4clk
  30          //Datalength:
  31          //Minlength:1.31ms @300k/13V    Maxlength:3.01ms @430k/4v
  32          //bit:[0:19] addcode    bit:[20:23] keycode
  33          ****************************************************************************************/
  34          void EnDecode(void)
  35          {
  36   1         EX0 = 1;                 //ø™int0÷–∂œ
  37   1         Decodecnt = 0;                       //∏¥Œªº∆ ˝∆˜
  38   1         ReIRcode = 0;
  39   1         Timer0_Run();                        //ø™∂® ±∆˜
  40   1         Timer0_InterruptEnable();//ø™∂® ±∆˜1÷–∂œ
  41   1         ENVSOC();
  42   1        //ø™÷–∂œ ø™∂® ±∆˜ ≤∂ªÒIRcode
  43   1      }
  44          void DsDecode(void)
  45          {
  46   1         EX0 = 0;
  47   1         Timer0_Stop();
  48   1         Decodecnt = 0;                       //∏¥Œªº∆ ˝∆˜
  49   1         ReIRcode = 0;
  50   1         DSENVSOC();
  51   1         K1_OUT_LOW();
  52   1        //πÿ÷–∂œ πÿ∂® ±∆˜ Ω⁄ °◊ ‘¥
  53   1      }
  54          void Timer0Init(void)           //40us@11.0592MHz       //”√¿¥Ω‚¬Î
C51 COMPILER V9.00   ISR                                                                   05/06/2015 14:06:26 PAGE 2   

  55          {
  56   1              Timer0_Stop();                  //πÿ∂® ±∆˜0
  57   1              AUXR |= 0x80;                   //∂® ±∆˜ ±÷”1Tƒ£ Ω
  58   1              TMOD &= 0xF0;                   //…Ë÷√∂® ±∆˜ƒ£ Ω
  59   1              TL0 = 0x8B;                             //…Ë÷√∂® ±≥ı÷µ
  60   1              TH0 = 0xFC;                             //…Ë÷√∂® ±≥ı÷µ
  61   1              TF0 = 0;                                //«Â≥˝TF0±Í÷æ
  62   1      }
  63          
  64          void Timer1Init(void)           //5∫¡√Î@22.1184MHz       ”√¿¥…®√Ë∞¥º¸µ»
  65          {
  66   1              Timer1_Stop();                  //πÿ∂® ±∆˜1
  67   1              AUXR &= ~0x40;                  //∂® ±∆˜ ±÷”1Tƒ£ Ω
  68   1              TMOD &= 0x0F;                   //…Ë÷√∂® ±∆˜ƒ£ Ω
  69   1              TL1 = 0x00;                             //…Ë÷√∂® ±≥ı÷µ
  70   1              TH1 = 0xDC;                             //…Ë÷√∂® ±≥ı÷µ
  71   1              TF1 = 0;                                //«Â≥˝TF1±Í÷æ
  72   1              Timer1_Run();                   //ø™∂® ±∆˜1
  73   1      }
  74          void Int0Init(void)
  75          {
  76   1          //≈‰÷√int0 ‰»Îƒ£ Ω  P3.2    XXXX,XHXX
  77   1              P3M1 |= 0x04;
  78   1              P3M0 &= ~0x04;
  79   1          INT0 = 0;
  80   1              IT0 = 0;                // 1£∫œ¬Ωµ—ÿ÷–∂œ    0£∫‘ –Ì…œ…˝—ÿ∫Õœ¬Ωµ—ÿ÷–∂œ
  81   1      }
  82          
  83          void Int3Init(void)
  84          {
  85   1          //≈‰÷√int0 ‰»Îƒ£ Ω  P3.2    XXXX,XHXX
  86   1              P3M1 |= 0x80;
  87   1              P3M0 &= ~0x80;
  88   1          INT_CLKO |= 0x20;               //(EX3 = 1) πƒ‹INT3÷–∂œ
  89   1      }
  90          
  91          void timerInit(void)
  92          {
  93   1              Timer0Init();          //º∆ ˝÷–∂œ
  94   1              Timer1Init();              //º∆ ˝÷–∂œ
  95   1              Timer1_InterruptEnable();//ø™∂® ±∆˜1÷–∂œ
  96   1              Int0Init();
  97   1          Int3Init();
  98   1      //      EnDecode();
  99   1      }
 100          
 101          void INT3_isr() interrupt INT3_VECTOR  //Õ‚≤ø÷–∂œ3 ”√¿¥ºÏ≤‚∆ º–≈∫≈
 102          {
 103   1      /////////////////////////////////////////////////////////
 104   1         if(Cutflag == 3)
 105   1         {
 106   2                Cutflag = 2; 
 107   2         }
 108   1      ////////////////////////////////////////////////////////
 109   1      }
 110          void INT0_isr() interrupt INT0_VECTOR  //Õ‚≤ø÷–∂œ0 ”√¿¥ºÏ≤‚“£øÿ¬Î
 111          {
 112   1          static u16 CountL , CountH;
 113   1              static u8 IR_BitCnt;    
 114   1              static u8 sync = 0;
 115   1              static u8 step = 0;
 116   1              static u32 IR_tmp=0;
C51 COMPILER V9.00   ISR                                                                   05/06/2015 14:06:26 PAGE 3   

 117   1              if(!sync)
 118   1              {
 119   2                      if(INT0) //…œ…˝—ÿ
 120   2                      {
 121   3                if(step==0)  //∆ ºŒª÷√£¨µ⁄“ª∏ˆ…œ…˝—ÿ∏¥Œªº∆ ˝∆˜
 122   3                        {
 123   4                                      Decodecnt = 0;
 124   4                                      step = 1;          //step = 1;
 125   4                        }
 126   3                        else if(step==2)     //ºÏ≤‚µΩ¡Àµ⁄∂˛∏ˆ…œ…˝—ÿ£¨ø…“‘ªÒ»°µÕµÁ∆Ω≥÷–¯ ±º‰
 127   3                        {               
 128   4                                 CountL = Decodecnt;   //ªÒ»°µΩµÕµÁ∆Ωµƒ ±º‰
 129   4                                 Decodecnt = 0;
 130   4                                 step = 0;
 131   4                                 if(CountL > CountH)   //œ»≈–∂œµÕµÁ∆Ω ±º‰¥Û”⁄∏ﬂµÁ∆Ω ±º‰
 132   4                                 {
 133   5                                    if((CountL >= SYNCMIN)&&(CountL <= SYNCMAX))//ΩÿªÒÕ¨≤Ω¬Î
 134   5                                        {
 135   6                                          sync = 1;   
 136   6                                              IR_BitCnt = D_IR_BIT_NUMBER;    //◊∞‘ÿŒª¬Î ˝
 137   6      #ifdef GET_FREQ
                                                  OscFreq =  1000/(CountL*40/124/8);       //kHz
              #endif
 140   6                         return;
 141   6                                        }
 142   5      
 143   5                                 }
 144   4      
 145   4                        }
 146   3      
 147   3                      } 
 148   2                      if(!INT0) //œ¬Ωµ—ÿ
 149   2                      {
 150   3                        if(step == 1)      //Àµ√˜“—ºÏ≤‚µΩ¡À“ª∏ˆ…œ…˝—ÿ
 151   3                        {
 152   4                            
 153   4                                CountH = Decodecnt;   //ªÒ»°µΩ∏ﬂµÁ∆Ωµƒ ±º‰
 154   4                                Decodecnt = 0;
 155   4                                step = 2;
 156   4                        }
 157   3                        else                      //µ⁄“ª¥ŒºÏ≤‚µƒ «œ¬Ωµ—ÿ£¨∏¥Œªº∆ ˝∆˜£¨≤Ω ˝∏¥Œª
 158   3                        {                   
 159   4                                Decodecnt = 0;
 160   4                                step = 0;               
 161   4                        }
 162   3                      }
 163   2              }
 164   1              else //“—Õ¨≤Ω£¨∂¡»° ˝æ›
 165   1              {
 166   2      //              SPEAKER=!SPEAKER;
 167   2                  if(!INT0) //œ¬Ωµ—ÿ
 168   2                  {
 169   3                 CountH = Decodecnt;   //ªÒ»°∏ﬂµÁ∆Ω ±º‰
 170   3                         Decodecnt = 0;
 171   3                         if(CountH > D_HIGHMAX) // ˝æ›≥¨ ±
 172   3                         sync = 0;
 173   3                  }
 174   2                  else if(INT0) //…œ…˝—ÿ
 175   2                  {
 176   3                 CountL = Decodecnt;   //ªÒ»°µÕµÁ∆Ω ±º‰
 177   3                         Decodecnt = 0;
 178   3                         IR_tmp <<= 1; //Ω” ’1bit
C51 COMPILER V9.00   ISR                                                                   05/06/2015 14:06:26 PAGE 4   

 179   3                         if(CountL < CountH)
 180   3                         {
 181   4                               IR_tmp |= 0X01;
 182   4                         } 
 183   3                         if(--IR_BitCnt == 0)                         //≈–∂œΩ” ’ «∑ÒÕÍ≥…
 184   3                         {
 185   4                           ReIRcode = IR_tmp;
 186   4                               IR_tmp = 0;
 187   4                               sync= 0;                       //«Â≥˝Õ¨≤Ω¬Î                
 188   4                         }                                               
 189   3                  }
 190   2              }
 191   1                                       
 192   1      }
 193          
 194          
 195          void T0_isr() interrupt TIMER0_VECTOR //∂® ±∆˜0÷–∂œ     40us
 196          {
 197   1         Decodecnt++;               
 198   1      }
 199          
 200          
 201          void T1_isr() interrupt TIMER1_VECTOR  //∂® ±∆˜1÷–∂œ”√¿¥◊ˆ µ ± ¬º˛¥¶¿Ì  5ms…®√Ë“ª¥Œ
 202          {
 203   1              static u8 cnt = 0;
 204   1              static u8 keycnt=0,beepcnt=0;
 205   1              static u16 popcnt=0,cutcnt=0;
 206   1              keycnt++;
 207   1              cnt++;
 208   1              if(cnt >= 100)//∞Î√Î
 209   1              {
 210   2                cnt =0;
 211   2                LED0=!LED0;
 212   2              } 
 213   1              if(keycnt>=4) 
 214   1              {
 215   2               KeyScan();
 216   2               keycnt = 0;
 217   2              }
 218   1              if(BeepFlag == 1)
 219   1              {
 220   2                SPEAKER = 1;
 221   2                if(beepcnt++>=5)
 222   2                {
 223   3                  SPEAKER = 0;
 224   3                      beepcnt = 0;
 225   3                      BeepFlag = 0;
 226   3                }
 227   2              }
 228   1              if(Cutflag ==1)
 229   1              {
 230   2                if(cutcnt++>=7)          //40ms 
 231   2                {
 232   3                      DSENVMOS();                       // πÿmosµÁ‘¥
 233   3                      DSENABLE595();                    // πÿ595øÿ÷∆mosø™πÿ
 234   3                      Cutflag = 0;
 235   3                      cutcnt =0;
 236   3                }
 237   2              } 
 238   1              if(POP != 0) 
 239   1              {
 240   2                 if(popcnt++>=400*POP)
C51 COMPILER V9.00   ISR                                                                   05/06/2015 14:06:26 PAGE 5   

 241   2                 {
 242   3                   popcnt = 0;
 243   3                       POP = 0;
 244   3               memcpy(OLED_GRAM,OLED_GRAM_TMP,512);
 245   3                       OLED_Refresh_Gram();
 246   3                       DsDecode();
 247   3                 }
 248   2              }           
 249   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    815    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
